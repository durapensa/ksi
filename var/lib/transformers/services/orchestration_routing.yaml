---
# Orchestration Service Event Routing Transformers
# Migrated from imperative handlers in orchestration_service.py
transformers:
  # Orchestration message routing to agents
  - name: "orchestration_message_to_agents"
    source: "orchestration:message"
    target: "agent:send_message"
    condition: "orchestration_id exists and from_agent exists"
    mapping:
      agent_id: "{{resolve_routing_targets(orchestration_id, from_agent, event)}}"
      message:
        type: "{{event|'message'}}"
        from: "{{from_agent}}"
        orchestration_id: "{{orchestration_id}}"
        payload: "{{payload}}"
        timestamp: "{{timestamp_utc()}}"
      context:
        routing_type: "orchestration_internal"
        source_agent: "{{from_agent}}"
    description: "Route orchestration messages to target agents based on routing rules"

  # Agent events to orchestration event collection
  - name: "agent_event_to_orchestration"
    source: "agent:event_result"
    target: "orchestration:event"
    condition: "_ksi_context.orchestration_id exists"
    mapping:
      orchestration_id: "{{_ksi_context.orchestration_id}}"
      source_agent: "{{agent_id}}"
      event: "{{event_name}}"
      data: "{{result_data}}"
      timestamp: "{{timestamp_utc()}}"
      context: "{{_ksi_context}}"
    description: "Collect agent events within orchestrations for state tracking"

  # Orchestration event storage and pattern analysis
  - name: "orchestration_event_storage"
    source: "orchestration:event"
    target: "state:entity:update"
    mapping:
      entity_type: "orchestration"
      entity_id: "{{orchestration_id}}"
      updates:
        received_events:
          timestamp: "{{timestamp}}"
          source_agent: "{{source_agent}}"
          event: "{{event}}"
          data: "{{data}}"
        last_activity: "{{timestamp}}"
        event_count: "{{received_events.length + 1}}"
      operation: "append_to_array"
      array_field: "received_events"
      array_limit: 100
    description: "Store orchestration events for pattern analysis and state tracking"

  # Orchestration termination request routing
  - name: "orchestration_termination_request"
    source: "orchestration:request_termination"
    target: "orchestration:terminate"
    condition: "is_orchestrator_agent(agent_id, orchestration_id)"
    mapping:
      orchestration_id: "{{find_orchestration_for_agent(agent_id)}}"
      reason: "agent_requested: {{reason}}"
      requested_by: "{{agent_id}}"
      termination_time: "{{timestamp_utc()}}"
      graceful: "{{graceful|true}}"
    description: "Route termination requests from orchestrator agents"

  # Orchestration agent spawning from components
  - name: "orchestration_spawn_component_agents"
    source: "orchestration:start"
    target: "agent:spawn_from_component"
    condition: "pattern.agents.*.profile starts_with 'components/'"
    mapping:
      agent_id: "{{orchestration_id}}_{{agent_name}}"
      component: "{{agents.*.profile}}"
      model: "{{agents.*.vars.model|'claude-cli/sonnet'}}"
      prompt: "{{agents.*.prompt|vars.prompt}}"
      context:
        orchestration_id: "{{orchestration_id}}"
        orchestration_depth: "{{vars.orchestration_depth + 1}}"
        parent_agent_id: "{{vars.coordinator_agent_id}}"
        root_orchestration_id: "{{vars.root_orchestration_id|orchestration_id}}"
        role: "{{agents.*.role|'participant'}}"
      variables: "{{merge(vars, agents.*.vars)}}"
    foreach: "pattern.agents"
    description: "Spawn component-based agents for orchestrations"

  # Orchestration agent spawning from profiles
  - name: "orchestration_spawn_profile_agents"
    source: "orchestration:start"
    target: "agent:spawn"
    condition: "pattern.agents.*.profile not starts_with 'components/'"
    mapping:
      agent_id: "{{orchestration_id}}_{{agent_name}}"
      profile: "{{agents.*.profile}}"
      model: "{{agents.*.vars.model|'claude-cli/sonnet'}}"
      prompt: "{{agents.*.prompt|vars.prompt}}"
      context:
        orchestration_id: "{{orchestration_id}}"
        orchestration_depth: "{{vars.orchestration_depth + 1}}"
        parent_agent_id: "{{vars.coordinator_agent_id}}"
        root_orchestration_id: "{{vars.root_orchestration_id|orchestration_id}}"
        role: "{{agents.*.role|'participant'}}"
      variables: "{{merge(vars, agents.*.vars)}}"
    foreach: "pattern.agents"
    description: "Spawn profile-based agents for orchestrations"

  # Orchestration completion routing
  - name: "orchestration_completion_routing"
    source: "orchestration:completed"
    target: "agent:completion_result"
    condition: "vars.coordinator_agent_id exists"
    mapping:
      agent_id: "{{vars.coordinator_agent_id}}"
      completion_data:
        orchestration_id: "{{orchestration_id}}"
        status: "completed"
        result: "{{result}}"
        completion_time: "{{timestamp_utc()}}"
        duration: "{{completion_time - start_time}}"
        agents_completed: "{{completed_agents}}"
      completion_type: "orchestration"
    description: "Route orchestration completion to coordinator agent"

  # Orchestration error routing
  - name: "orchestration_error_routing"
    source: "orchestration:error"
    target: "agent:completion_error"
    condition: "vars.coordinator_agent_id exists"
    mapping:
      agent_id: "{{vars.coordinator_agent_id}}"
      error_data:
        orchestration_id: "{{orchestration_id}}"
        error: "{{error}}"
        error_type: "orchestration_error"
        failed_agent: "{{failed_agent}}"
        error_time: "{{timestamp_utc()}}"
        partial_results: "{{partial_results}}"
      completion_type: "orchestration_error"
    description: "Route orchestration errors to coordinator agent"

  # Hierarchical event routing between agents
  - name: "hierarchical_agent_event_routing"
    source: "agent:emit_event"
    target: "completion:async"
    condition: "_ksi_context.orchestration_id exists and should_receive_hierarchical_event(source_agent_id, target_agent_id, subscription_level)"
    mapping:
      agent_id: "{{target_agent_id}}"
      prompt: "Event notification from {{source_agent_id}}: {{event_name}}"
      event_notification:
        source_agent: "{{source_agent_id}}"
        event: "{{event_name}}"
        data: "{{$}}"
        routed_by: "hierarchical_transformer"
        orchestration_id: "{{_ksi_context.orchestration_id}}"
        routing_level: "{{subscription_level}}"
      context:
        notification_type: "hierarchical_event"
        no_response_required: true
    foreach: "hierarchical_targets"
    description: "Route agent events hierarchically based on subscription levels"

  # Orchestration status broadcasting
  - name: "orchestration_status_broadcast"
    source: "orchestration:status_change"
    target: "monitor:broadcast_event"
    mapping:
      event_name: "orchestration:status_change"
      event_data:
        orchestration_id: "{{orchestration_id}}"
        status: "{{status}}"
        previous_status: "{{previous_status}}"
        timestamp: "{{timestamp_utc()}}"
        agent_count: "{{agents.length}}"
        completed_agents: "{{completed_agents.length}}"
      broadcast_metadata:
        originator_agent: "orchestration_service"
        timestamp: "{{timestamp_utc()}}"
        subscription_required: false
        category: "orchestration_lifecycle"
    description: "Broadcast orchestration status changes for monitoring"

  # Orchestration cleanup routing
  - name: "orchestration_cleanup_routing"
    source: "orchestration:completed"
    target: "system:cleanup"
    async: true
    mapping:
      cleanup_type: "orchestration_resources"
      orchestration_id: "{{orchestration_id}}"
      resources_to_clean:
        - "agent_sessions"
        - "routing_state"
        - "event_history"
        - "temp_data"
      cleanup_delay: 300  # 5 minutes
      force_cleanup: false
      preserve_results: true
    description: "Schedule resource cleanup after orchestration completion"