#!/usr/bin/env python3\n"""\nCorrelation Tracing Plugin\n\nProvides correlation ID tracing functionality for debugging and monitoring\ncomplex event chains in the KSI daemon system.\n"""\n\nfrom typing import Dict, Any, Optional\nimport pluggy\n\nfrom ksi_common.logging import get_logger\nfrom ksi_daemon.plugin_utils import plugin_metadata\nfrom ksi_daemon import correlation\n\n# Plugin metadata\nplugin_metadata("correlation", version="1.0.0",\n                description="Correlation ID tracing for event chain debugging")\n\n# Hook implementation marker\nhookimpl = pluggy.HookimplMarker("ksi")\n\n# Module state\nlogger = get_logger("correlation")\n\n# Plugin info\nPLUGIN_INFO = {\n    "name": "correlation",\n    "version": "1.0.0",\n    "description": "Correlation ID tracing and monitoring"\n}\n\n\n@hookimpl\ndef ksi_startup(config):\n    """Initialize correlation plugin."""\n    logger.info("Correlation tracing plugin started")\n    return {"plugin.correlation": {"loaded": True}}\n\n\n@hookimpl\ndef ksi_handle_event(event_name: str, data: Dict[str, Any], context: Dict[str, Any]):\n    """Handle correlation-related events."""\n    \n    if event_name == "correlation:trace":\n        return handle_get_trace(data)\n    \n    elif event_name == "correlation:chain":\n        return handle_get_trace_chain(data)\n    \n    elif event_name == "correlation:tree":\n        return handle_get_trace_tree(data)\n    \n    elif event_name == "correlation:stats":\n        return handle_get_stats(data)\n    \n    elif event_name == "correlation:cleanup":\n        return handle_cleanup(data)\n    \n    elif event_name == "correlation:current":\n        return handle_get_current(data)\n    \n    return None\n\n\ndef handle_get_trace(data: Dict[str, Any]) -> Dict[str, Any]:\n    """Get a specific correlation trace."""\n    correlation_id = data.get("correlation_id")\n    \n    if not correlation_id:\n        return {"error": "correlation_id required"}\n    \n    trace = correlation.get_trace(correlation_id)\n    if not trace:\n        return {"error": f"Trace {correlation_id} not found"}\n    \n    return {\n        "correlation_id": trace.correlation_id,\n        "parent_id": trace.parent_id,\n        "event_name": trace.event_name,\n        "created_at": trace.created_at,\n        "completed_at": trace.completed_at,\n        "duration_ms": (\n            int((trace.completed_at - trace.created_at) * 1000) \n            if trace.completed_at else None\n        ),\n        "data": trace.data,\n        "children": trace.children,\n        "result": trace.result,\n        "error": trace.error\n    }\n\n\ndef handle_get_trace_chain(data: Dict[str, Any]) -> Dict[str, Any]:\n    """Get the full trace chain for a correlation ID."""\n    correlation_id = data.get("correlation_id")\n    \n    if not correlation_id:\n        return {"error": "correlation_id required"}\n    \n    chain = correlation.get_trace_chain(correlation_id)\n    \n    return {\n        "correlation_id": correlation_id,\n        "chain_length": len(chain),\n        "chain": [\n            {\n                "correlation_id": trace.correlation_id,\n                "parent_id": trace.parent_id,\n                "event_name": trace.event_name,\n                "created_at": trace.created_at,\n                "completed_at": trace.completed_at,\n                "duration_ms": (\n                    int((trace.completed_at - trace.created_at) * 1000) \n                    if trace.completed_at else None\n                ),\n                "error": trace.error\n            }\n            for trace in chain\n        ]\n    }\n\n\ndef handle_get_trace_tree(data: Dict[str, Any]) -> Dict[str, Any]:\n    """Get the full trace tree for a correlation ID."""\n    correlation_id = data.get("correlation_id")\n    \n    if not correlation_id:\n        return {"error": "correlation_id required"}\n    \n    tree = correlation.get_trace_tree(correlation_id)\n    \n    return {\n        "correlation_id": correlation_id,\n        "tree": tree\n    }\n\n\ndef handle_get_stats(data: Dict[str, Any]) -> Dict[str, Any]:\n    """Get correlation tracking statistics."""\n    stats = correlation.get_correlation_stats()\n    \n    return {\n        "correlation_stats": stats\n    }\n\n\ndef handle_cleanup(data: Dict[str, Any]) -> Dict[str, Any]:\n    """Clean up old correlation traces."""\n    max_age_hours = data.get("max_age_hours", 24)\n    \n    try:\n        cleaned_count = correlation.cleanup_old_traces(max_age_hours)\n        return {\n            "cleaned_traces": cleaned_count,\n            "max_age_hours": max_age_hours\n        }\n    except Exception as e:\n        return {"error": str(e)}\n\n\ndef handle_get_current(data: Dict[str, Any]) -> Dict[str, Any]:\n    """Get current correlation context."""\n    return {\n        "current_correlation_id": correlation.get_current_correlation_id(),\n        "parent_correlation_id": correlation.get_parent_correlation_id()\n    }\n\n\n@hookimpl\ndef ksi_shutdown():\n    """Clean up on shutdown."""\n    # Clean up old traces on shutdown\n    try:\n        cleaned_count = correlation.cleanup_old_traces(max_age_hours=1)  # Aggressive cleanup on shutdown\n        logger.info(f"Cleaned up {cleaned_count} old traces on shutdown")\n    except Exception as e:\n        logger.error(f"Error cleaning up traces: {e}")\n    \n    logger.info("Correlation tracing plugin stopped")\n    return {"plugin.correlation": {"stopped": True}}\n\n\n# Module-level marker for plugin discovery\nksi_plugin = True