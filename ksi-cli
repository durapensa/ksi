#!/usr/bin/env python3
"""
ksi-cli - Command-line interface for KSI daemon

A safe, controlled CLI wrapper around ksi_client that's perfect for
use with Claude's restricted Bash tool access.

Examples:
    ksi-cli send completion:async --prompt "Hello" --model claude-cli/sonnet
    ksi-cli send state:set --key mykey --value '{"data": "test"}'
    ksi-cli discover
    ksi-cli help completion:async
    ksi-cli list conversations --limit 10
"""

import asyncio
import json
import sys
import argparse
from typing import Dict, Any, Optional
from pathlib import Path
import os

from ksi_client import EventClient
from ksi_client.exceptions import KSIError
from ksi_common.logging import configure_structlog


class KSICLIError(Exception):
    """CLI-specific errors."""
    pass


class KSICLI:
    """Command-line interface for KSI daemon."""
    
    def __init__(self, socket_path: Optional[Path] = None):
        self.socket_path = socket_path
        self.client: Optional[EventClient] = None
    
    async def setup(self):
        """Initialize client connection."""
        self.client = EventClient(
            client_id="ksi-cli",
            socket_path=self.socket_path
        )
        await self.client.__aenter__()
    
    async def teardown(self):
        """Clean up client connection."""
        if self.client:
            await self.client.__aexit__(None, None, None)
    
    async def send_event(self, event_name: str, data: Dict[str, Any]) -> Any:
        """Send an event and return raw response (REST pattern)."""
        return await self.client.send_event(event_name, data)
    
    async def discover(self, namespace: Optional[str] = None) -> None:
        """Discover and display available events."""
        data = {}
        if namespace:
            data["namespace"] = namespace
        
        # Use send_and_merge for discovery - merge 'events' field from all handlers
        merged = await self.client.send_and_merge("system:discover", data, merge_key="events")
        all_events = merged.get('events', {})
        total_events = merged.get('total', 0)  # Changed from 'total_events' to 'total'
        
        # Group events by namespace
        namespaces = {}
        for event_name, event_info in all_events.items():
            # Extract namespace from event name (e.g., "system:health" -> "system")
            if ':' in event_name:
                ns, event_short = event_name.split(':', 1)
            else:
                ns = 'default'
                event_short = event_name
            
            if ns not in namespaces:
                namespaces[ns] = []
            
            namespaces[ns].append({
                'name': event_name,
                'short_name': event_short,
                'info': event_info
            })
        
        # Sort namespaces and print with clean output
        first = True
        for ns in sorted(namespaces.keys()):
            if not first:
                print()  # Empty line between namespaces
            first = False
            print(f"{ns}:")
            for event in sorted(namespaces[ns], key=lambda e: e['short_name']):
                summary = event['info'].get('summary', 'No description')
                # Truncate long summaries
                if len(summary) > 50:
                    summary = summary[:47] + "..."
                print(f"  {event['name']:<30} {summary}")
    
    async def help(self, event_name: str) -> None:
        """Get detailed help for an event."""
        # Use send_and_merge to combine help from all handlers
        merged_help = await self.client.send_and_merge("system:help", {"event": event_name})
        
        # Default values if not provided
        if "event" not in merged_help:
            merged_help["event"] = event_name
        if "namespace" not in merged_help:
            merged_help["namespace"] = "unknown"
        if "summary" not in merged_help:
            merged_help["summary"] = "No description"
        if "parameters" not in merged_help:
            merged_help["parameters"] = {}
        if "examples" not in merged_help:
            merged_help["examples"] = []
        
        
        # Clean output format
        print(f"{merged_help['event']}")
        print(f"{merged_help['summary']}")
        
        # Parameters
        if merged_help["parameters"]:
            print("\nParameters:")
            for name, info in merged_help["parameters"].items():
                req = " (required)" if info.get('required') else " (optional)"
                param_type = info.get('type', 'Any')
                desc = info.get('description', '')
                print(f"  --{name}: {param_type}{req}")
                if desc:
                    print(f"      {desc}")
                # Only show separate default if not already mentioned in description
                if default := info.get('default'):
                    if desc and "(default:" not in desc.lower():
                        print(f"      Default: {default}")
                if values := info.get('allowed_values'):
                    print(f"      Allowed: {', '.join(map(str, values))}")
                # Show validation constraints
                # Value constraints (for numeric types)
                if 'min_value' in info or 'max_value' in info:
                    min_val = info.get('min_value')
                    max_val = info.get('max_value')
                    if min_val is not None and max_val is not None:
                        print(f"      Range: {min_val}-{max_val}")
                    elif min_val is not None:
                        print(f"      Min: {min_val}")
                    elif max_val is not None:
                        print(f"      Max: {max_val}")
                
                # Length constraints (for strings/lists)
                if 'min_length' in info or 'max_length' in info or 'exact_length' in info:
                    if exact_len := info.get('exact_length'):
                        print(f"      Length: {exact_len}")
                    else:
                        min_len = info.get('min_length')
                        max_len = info.get('max_length')
                        if min_len is not None and max_len is not None:
                            print(f"      Length: {min_len}-{max_len}")
                        elif min_len is not None:
                            print(f"      Min length: {min_len}")
                        elif max_len is not None:
                            print(f"      Max length: {max_len}")
                
                # Pattern constraints
                if pattern := info.get('pattern'):
                    print(f"      Pattern: {pattern}")
                
                # Type validation
                if val_type := info.get('validation_type'):
                    print(f"      Must be valid: {val_type}")
        
        # Examples
        if merged_help["examples"]:
            print("\nExamples:")
            for i, ex in enumerate(merged_help["examples"], 1):
                if desc := ex.get('description'):
                    print(f"  {desc}")
                # Show as CLI command
                cmd = f"ksi send {event_name}"
                for key, value in ex.get('data', {}).items():
                    if isinstance(value, (dict, list)):
                        cmd += f" --{key} '{json.dumps(value)}'"
                    else:
                        cmd += f" --{key} {value}"
                print(f"  $ {cmd}")
                if i < len(merged_help["examples"]):
                    print()  # Empty line between examples
    
    async def list_conversations(self, limit: int = 10) -> None:
        """List recent conversations."""
        try:
            # conversation:list typically returns a single response with all conversations
            result = await self.client.send_single("conversation:list", {"limit": limit})
            
            conversations = result.get('conversations', [])
            total_count = result.get('total', len(conversations))
            
            if not conversations:
                print("No conversations found")
                return
            
            # Clean output - no header
            for i, conv in enumerate(conversations):
                session_id = conv.get('session_id', 'unknown')[:8]
                timestamp = conv.get('last_timestamp', 'unknown')
                msg_count = conv.get('message_count', 0)
                first_msg = conv.get('first_message', '')[:40]
                
                if i > 0:
                    print()  # Empty line between conversations
                print(f"{session_id}... | {timestamp} | {msg_count} messages")
                if first_msg:
                    print(f"  {first_msg}...")
                    
        except Exception as e:
            print(f"Error listing conversations: {e}")
    
    async def get_state(self, key: str, namespace: str = "default") -> None:
        """Get a state value."""
        try:
            # Use send_single since state:get should return one response
            result = await self.client.send_single("state:get", {
                "key": key,
                "namespace": namespace
            })
            
            if result.get('found'):
                value = result.get('value')
                if isinstance(value, (dict, list)):
                    print(json.dumps(value, indent=2))
                else:
                    print(value)
            else:
                print(f"Key not found: {key} (namespace: {namespace})")
                
        except Exception as e:
            print(f"Error: {e}")
    
    async def set_state(self, key: str, value: Any, namespace: str = "default") -> None:
        """Set a state value."""
        try:
            # Use send_single since state:set should return one response
            result = await self.client.send_single("state:set", {
                "key": key,
                "value": value,
                "namespace": namespace
            })
            
            if result.get('status') == 'set':
                print(f"✓ Set {key} = {value} in namespace '{namespace}'")
            else:
                print(f"Failed to set state: {key}")
                
        except Exception as e:
            print(f"Error: {e}")


def parse_event_data(args: argparse.Namespace) -> Dict[str, Any]:
    """Parse event data from command-line arguments."""
    data = {}
    
    # Convert namespace to dict, excluding special attributes
    for key, value in vars(args).items():
        if key in ['command', 'event', 'func', 'socket_path', 'json', 'output', 'args']:
            continue
        if value is not None:
            # Try to parse JSON values
            if isinstance(value, str) and (value.startswith('{') or value.startswith('[')):
                try:
                    data[key] = json.loads(value)
                except json.JSONDecodeError:
                    data[key] = value
            else:
                data[key] = value
    
    return data


async def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="KSI Command-Line Interface",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Send a completion request
  ksi-cli send completion:async --prompt "Hello" --model claude-cli/sonnet
  
  # Set state
  ksi-cli send state:set --key config --value '{"theme": "dark"}' --namespace user
  
  # Discover events
  ksi-cli discover
  ksi-cli discover --namespace completion
  
  # Get help
  ksi-cli help completion:async
  
  # List conversations
  ksi-cli list conversations
  
  # Get state value
  ksi-cli get state --key config --namespace user
  
  # Raw JSON mode (for complex requests)
  ksi-cli send completion:async --json '{"prompt": "Hello", "model": "claude-cli/sonnet"}'
"""
    )
    
    parser.add_argument(
        "--socket-path",
        type=Path,
        help="Path to KSI daemon socket (default: var/run/daemon.sock)"
    )
    
    parser.add_argument(
        "--health",
        action="store_true",
        help="Show daemon health status and connection details"
    )
    
    subparsers = parser.add_subparsers(dest="command", help="Commands")
    
    # Send command - the main workhorse
    send_parser = subparsers.add_parser("send", help="Send an event to KSI")
    send_parser.add_argument("event", help="Event name (e.g., completion:async)")
    send_parser.add_argument("--json", help="Provide event data as JSON")
    send_parser.add_argument("--output", choices=["json", "pretty"], default="pretty",
                           help="Output format")
    
    # Dynamic argument parsing for send command
    # We'll add arguments based on what's provided
    send_parser.add_argument("args", nargs=argparse.REMAINDER,
                           help="Event parameters as --key value pairs")
    
    # Discover command
    discover_parser = subparsers.add_parser("discover", help="Discover available events")
    discover_parser.add_argument("--namespace", help="Filter by namespace")
    
    # Help command
    help_parser = subparsers.add_parser("help", help="Get help for an event")
    help_parser.add_argument("event", help="Event name to get help for")
    
    # List command
    list_parser = subparsers.add_parser("list", help="List various resources")
    list_parser.add_argument("resource", choices=["conversations", "states"],
                           help="Resource to list")
    list_parser.add_argument("--limit", type=int, default=10, help="Maximum results")
    
    # Get command (for state)
    get_parser = subparsers.add_parser("get", help="Get resource")
    get_parser.add_argument("resource", choices=["state"], help="Resource type")
    get_parser.add_argument("--key", required=True, help="Key to get")
    get_parser.add_argument("--namespace", default="default", help="Namespace")
    
    # Parse initial args to get command
    args, unknown = parser.parse_known_args()
    
    # For send command, parse the remaining arguments
    # Use args.args instead of unknown since we're using REMAINDER
    if args.command == "send" and hasattr(args, 'args') and args.args:
        # Create a new parser for the specific event
        event_parser = argparse.ArgumentParser(prog=f"ksi-cli send {args.event}")
        
        # Add arguments from args.args (the REMAINDER)
        i = 0
        while i < len(args.args):
            if args.args[i].startswith('--'):
                key = args.args[i][2:]
                event_parser.add_argument(f'--{key}', default=None)
            i += 1
        
        # Parse the event-specific arguments
        event_args = event_parser.parse_args(args.args)
        
        # Merge with main args
        for key, value in vars(event_args).items():
            setattr(args, key, value)
    
    # Configure logging based on --health flag
    if args.health:
        # Enable verbose logging for health check
        configure_structlog(log_level="INFO", log_format="console")
    else:
        # Suppress all logging output for clean CLI output
        configure_structlog(log_level="CRITICAL", log_format="console", force_disable_console=True)
    
    # Execute command
    cli = KSICLI(socket_path=args.socket_path)
    
    try:
        await cli.setup()
        
        if args.command == "send":
            # Parse event data
            if args.json:
                data = json.loads(args.json)
            else:
                data = parse_event_data(args)
            
            # Send event
            result = await cli.send_event(args.event, data)
            
            # Output result - handle REST pattern (single dict or array)
            if args.output == "json":
                print(json.dumps(result, indent=2))
            else:
                # Handle REST pattern: single object or array
                if isinstance(result, dict):
                    # Single response
                    if "error" in result:
                        print(f"Error: {result['error']}")
                    elif args.event == "completion:async":
                        print(f"Request ID: {result.get('request_id', 'unknown')}")
                        print(f"Status: {result.get('status', 'unknown')}")
                        if session_id := result.get('session_id'):
                            print(f"Session ID: {session_id}")
                    else:
                        # Generic pretty print for single response
                        for key, value in result.items():
                            if isinstance(value, (dict, list)):
                                print(f"{key}:")
                                print(f"  {json.dumps(value, indent=2)}")
                            else:
                                print(f"{key}: {value}")
                elif isinstance(result, list):
                    # Multiple responses
                    if not result:
                        print("No response received")
                    elif len(result) == 1:
                        # Single item in array - print without numbering
                        response = result[0]
                        if isinstance(response, dict):
                            if "error" in response:
                                print(f"Error: {response['error']}")
                            else:
                                for key, value in response.items():
                                    if isinstance(value, (dict, list)):
                                        print(f"{key}:")
                                        print(f"  {json.dumps(value, indent=2)}")
                                    else:
                                        print(f"{key}: {value}")
                    else:
                        # Multiple responses - show each
                        print(f"Multiple responses ({len(result)}):")
                        for i, response in enumerate(result):
                            print(f"\nResponse {i+1}:")
                            if isinstance(response, dict):
                                for key, value in response.items():
                                    if isinstance(value, (dict, list)):
                                        print(f"  {key}: {json.dumps(value, indent=2)}")
                                    else:
                                        print(f"  {key}: {value}")
                            else:
                                print(f"  {response}")
                else:
                    # Unexpected response type
                    print(f"Unexpected response type: {type(result)}")
                    print(result)
        
        elif args.command == "discover":
            await cli.discover(args.namespace)
        
        elif args.command == "help":
            await cli.help(args.event)
        
        elif args.command == "list":
            if args.resource == "conversations":
                await cli.list_conversations(args.limit)
        
        elif args.command == "get":
            if args.resource == "state":
                await cli.get_state(args.key, args.namespace)
        
        else:
            parser.print_help()
            return 1
        
        return 0
        
    except KSIError as e:
        print(f"KSI Error: {e}", file=sys.stderr)
        return 1
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return 1
    finally:
        await cli.teardown()


def run():
    """Synchronous entry point."""
    sys.exit(asyncio.run(main()))


if __name__ == "__main__":
    run()