#!/usr/bin/env python3
"""
ksi - Command-line interface for KSI daemon

A dynamic CLI that uses the KSI discovery system to provide self-configuring
command interfaces with intelligent parameter handling.

Examples:
    ksi discover --detail --namespace monitor
    ksi help monitor:get_status
    ksi send completion:async --prompt "Hello" --model sonnet
    ksi send monitor:get_status --limit 5 --include-agents
"""

import asyncio
import json
import os
import sys
from pathlib import Path
from typing import Dict, Any, Optional

# Ensure KSI modules can be imported from any location
try:
    from ksi_client import EventClient
except ImportError:
    # Find KSI root and add to path
    ksi_root = os.environ.get('KSI_ROOT')
    if not ksi_root:
        # Try to find KSI root from script location
        script_path = Path(__file__).resolve()
        if script_path.parent.name == 'ksi' or (script_path.parent / 'ksi_common').exists():
            ksi_root = str(script_path.parent)
        else:
            # Search upward for ksi_common
            current = script_path.parent
            while current != current.parent:
                if (current / 'ksi_common').exists():
                    ksi_root = str(current)
                    break
                current = current.parent
    
    if ksi_root:
        sys.path.insert(0, ksi_root)
    else:
        print("Error: Cannot find KSI root directory. Please set KSI_ROOT or run from within the project.", file=sys.stderr)
        sys.exit(1)

import click
from ksi_client import EventClient
from ksi_client.exceptions import KSIError
from ksi_common.logging import configure_structlog
from ksi_common.error_formatting import format_error_for_cli


class KSIClickClient:
    """Click-based KSI client with dynamic parameter discovery."""
    
    def __init__(self, socket_path: Optional[Path] = None):
        self.socket_path = socket_path
        self.client: Optional[EventClient] = None
    
    async def setup(self):
        """Initialize client connection."""
        self.client = EventClient(client_id="ksi-cli", socket_path=self.socket_path)
        await self.client.__aenter__()
    
    async def teardown(self):
        """Clean up client connection."""
        if self.client:
            await self.client.__aexit__(None, None, None)
    
    async def send_event(self, event_name: str, data: Dict[str, Any]) -> Any:
        """Send an event and return raw response."""
        return await self.client.send_event(event_name, data)
    
    async def discover_event_parameters(self, event_name: str) -> Dict[str, Any]:
        """Discover parameters for an event using KSI's discovery system."""
        try:
            result = await self.client.send_single("system:help", {"event": event_name})
            return result.get("parameters", {})
        except Exception:
            return {}
    
    def pretty_print_discovery(self, result: Dict[str, Any], level: str = 'namespace') -> None:
        """Pretty print discovery results based on level."""
        all_events = result.get('events', {})
        
        # Group events by namespace
        namespaces = {}
        for event_name, event_info in all_events.items():
            if ':' in event_name:
                ns, event_short = event_name.split(':', 1)
            else:
                ns = 'default'
                event_short = event_name
            
            if ns not in namespaces:
                namespaces[ns] = []
            
            namespaces[ns].append({
                'name': event_name,
                'short_name': event_short,
                'info': event_info
            })
        
        if level == 'summary':
            # Show namespace summary with counts and descriptions
            click.echo("KSI Event Namespaces:")
            click.echo("====================")
            click.echo()
            
            # Define namespace descriptions
            ns_descriptions = {
                'agent': 'Agent lifecycle and management',
                'system': 'Core system functionality',
                'monitor': 'Event monitoring and status',
                'completion': 'LLM completion handling',
                'composition': 'Profile and prompt composition',
                'orchestration': 'Multi-agent orchestration',
                'state': 'Entity and relationship management',
                'evaluation': 'Testing and evaluation system',
                'permission': 'Access control and sandboxing',
                'message': 'Inter-agent messaging',
                'observation': 'Agent activity monitoring',
                'dev': 'Development and debugging',
                'config': 'Configuration management',
                'correlation': 'Event correlation tracking',
                'conversation': 'Conversation management',
                'event': 'Event system control',
                'module': 'Module inspection',
                'checkpoint': 'State persistence',
                'injection': 'Context injection',
                'mcp': 'Model Context Protocol',
                'runtime': 'Runtime configuration',
                'sandbox': 'Agent sandboxing',
                'tournament': 'Judge tournaments',
                'transformer': 'Event transformation',
                'transport': 'Network transport',
                'router': 'Event routing',
                'event_log': 'Event log queries',
                'shutdown': 'Shutdown coordination',
                'observe': 'Observation events'
            }
            
            for ns in sorted(namespaces.keys()):
                count = len(namespaces[ns])
                desc = ns_descriptions.get(ns, 'Specialized functionality')
                click.echo(f"  {ns:<15} ({count:>3} events)  {desc}")
            
            click.echo()
            click.echo("Use 'ksi discover --namespace <name>' to explore a specific namespace")
            click.echo("Use 'ksi discover --level namespace' to see all events")
            
        elif level == 'namespace' or level == 'full':
            # Show events grouped by namespace (current behavior)
            first = True
            for ns in sorted(namespaces.keys()):
                if not first:
                    click.echo()
                first = False
                click.echo(f"{ns}:")
                for event in sorted(namespaces[ns], key=lambda e: e['short_name']):
                    summary = event['info'].get('summary', 'No description')
                    if len(summary) > 50:
                        summary = summary[:47] + "..."
                    click.echo(f"  {event['name']:<30} {summary}")
    
    def pretty_print_help(self, result: Dict[str, Any], event_name: str = None) -> None:
        """Pretty print help results."""
        # Use provided event_name or try to get from result
        if not event_name:
            event_name = result.get('event', 'unknown')
        summary = result.get('summary', 'No description')
        parameters = result.get('parameters', {})
        examples = result.get('examples', [])
        
        click.echo(f"{event_name}")
        click.echo(f"{summary}")
        
        if parameters:
            click.echo("\nParameters:")
            for name, info in parameters.items():
                req = " (required)" if info.get('required') else " (optional)"
                param_type = info.get('type', 'Any')
                desc = info.get('description', '')
                click.echo(f"  --{name}: {param_type}{req}")
                if desc:
                    click.echo(f"      {desc}")
                if default := info.get('default'):
                    if desc and "(default:" not in desc.lower():
                        click.echo(f"      Default: {default}")
                if values := info.get('allowed_values'):
                    click.echo(f"      Allowed: {', '.join(map(str, values))}")
        
        if examples:
            click.echo("\nExamples:")
            for i, ex in enumerate(examples, 1):
                if desc := ex.get('description'):
                    click.echo(f"  {desc}")
                cmd = f"ksi send {event_name}"
                for key, value in ex.get('data', {}).items():
                    if isinstance(value, (dict, list)):
                        cmd += f" --{key} '{json.dumps(value)}'"
                    else:
                        cmd += f" --{key} {value}"
                click.echo(f"  $ {cmd}")
                if i < len(examples):
                    click.echo()
    
    def show_system_overview(self) -> None:
        """Show KSI system overview for new users."""
        click.echo("KSI System Overview")
        click.echo("==================")
        click.echo()
        click.echo("Common Commands:")
        click.echo("  ksi help                       Show this overview")
        click.echo("  ksi discover                   Explore available events") 
        click.echo("  ksi send monitor:get_status    Get current system status")
        click.echo("  ksi send system:health         Check daemon health")
        click.echo()
        click.echo("Getting Started:")
        click.echo("  1. Check system status:  ksi send monitor:get_status")
        click.echo("  2. Explore namespaces:   ksi discover --output-format pretty")
        click.echo("  3. Filter by namespace:  ksi discover --namespace agent")
        click.echo("  4. Get event details:    ksi help agent:spawn")
        click.echo("  5. Send an event:        ksi send agent:list")
        click.echo()
        click.echo("Examples:")
        click.echo("  # Monitor system activity")
        click.echo("  ksi send monitor:get_status --limit 10")
        click.echo()
        click.echo("  # Work with agents") 
        click.echo("  ksi send agent:list")
        click.echo("  ksi send agent:spawn --profile base_single_agent")
        click.echo()
        click.echo("  # Send completions")
        click.echo('  ksi send completion:async --prompt "Hello" --model sonnet')
        click.echo()
        click.echo("Tips:")
        click.echo("  • Use --output-format pretty for human-readable output")
        click.echo("  • Use --output-format json for scripting")
        click.echo("  • Set KSI_CLI_OUTPUT_FORMAT=json environment variable for default JSON")
        click.echo("  • Add --help to any command for more information")
        click.echo()
        click.echo("For detailed help on any event: ksi help <event_name>")
    
    def get_namespace_description(self, ns: str) -> str:
        """Get description for a namespace."""
        ns_descriptions = {
            'agent': 'Agent lifecycle and management',
            'system': 'Core system functionality',
            'monitor': 'Event monitoring and status',
            'completion': 'LLM completion handling',
            'composition': 'Profile and prompt composition',
            'orchestration': 'Multi-agent orchestration',
            'state': 'Entity and relationship management',
            'evaluation': 'Testing and evaluation system',
            'permission': 'Access control and sandboxing',
            'message': 'Inter-agent messaging',
            'observation': 'Agent activity monitoring',
            'dev': 'Development and debugging',
            'config': 'Configuration management',
            'correlation': 'Event correlation tracking',
            'conversation': 'Conversation management',
            'event': 'Event system control',
            'module': 'Module inspection',
            'checkpoint': 'State persistence',
            'injection': 'Context injection',
            'mcp': 'Model Context Protocol',
            'runtime': 'Runtime configuration',
            'sandbox': 'Agent sandboxing',
            'tournament': 'Judge tournaments',
            'transformer': 'Event transformation',
            'transport': 'Network transport',
            'router': 'Event routing',
            'event_log': 'Event log queries',
            'shutdown': 'Shutdown coordination',
            'observe': 'Observation events'
        }
        return ns_descriptions.get(ns, 'Specialized functionality')
    
    def pretty_print_summary(self, result: Dict[str, Any]) -> None:
        """Pretty print summary format (for processed results)."""
        click.echo("KSI Event Namespaces:")
        click.echo("====================")
        click.echo()
        
        namespaces = result.get('namespaces', {})
        for ns in sorted(namespaces.keys()):
            info = namespaces[ns]
            count = info.get('count', 0)
            desc = info.get('description', 'Specialized functionality')
            click.echo(f"  {ns:<15} ({count:>3} events)  {desc}")
        
        click.echo()
        click.echo("Use 'ksi discover --namespace <name>' to explore a specific namespace")
        click.echo("Use 'ksi discover --level namespace' to see all events")
    
    def pretty_print_orchestration(self, result: Dict[str, Any]) -> None:
        """Pretty print orchestration discovery results."""
        orch = result.get('orchestration', {})
        
        click.echo(f"Orchestration: {orch.get('id', 'Unknown')}")
        click.echo("=" * 50)
        click.echo()
        
        # Basic info
        click.echo(f"Pattern: {orch.get('pattern', 'Unknown')}")
        click.echo(f"State: {orch.get('state', 'Unknown')}")
        click.echo(f"Subscription Level: {orch.get('event_subscription_level', 1)}")
        click.echo(f"Error Handling: {orch.get('error_handling', 'bubble')}")
        
        if orch.get('parent_orchestration'):
            click.echo(f"Parent: {orch['parent_orchestration']}")
        
        # Agents
        agents = result.get('agents', [])
        if agents:
            click.echo()
            click.echo(f"Agents ({len(agents)}):")
            for agent in agents:
                depth_indent = "  " * agent.get('orchestration_depth', 0)
                status = agent.get('status', 'unknown')
                profile = agent.get('profile', 'Unknown')
                click.echo(f"{depth_indent}├─ {agent.get('agent_id')} [{status}] - {profile}")
        
        # Hierarchy
        hierarchy = result.get('hierarchy', {})
        if hierarchy.get('root_agents'):
            click.echo()
            click.echo("Agent Hierarchy:")
            tree = hierarchy.get('agent_tree', {})
            
            def print_tree(agent_id, depth=0):
                indent = "  " * depth
                click.echo(f"{indent}├─ {agent_id}")
                if agent_id in tree:
                    for child in tree[agent_id]:
                        print_tree(child, depth + 1)
            
            for root in hierarchy['root_agents']:
                print_tree(root)
        
        # Recent events
        events = result.get('recent_events', [])
        if events:
            click.echo()
            click.echo(f"Recent Events (last {len(events)}):")
            for event in events[:10]:  # Show max 10
                click.echo(f"  {event.get('timestamp', '')} - {event.get('event_name', '')} (agent: {event.get('agent_id', 'N/A')})")
        
        # Statistics
        stats = result.get('statistics', {})
        if stats:
            click.echo()
            click.echo("Statistics:")
            click.echo(f"  Total Agents: {stats.get('total_agents', 0)}")
            click.echo(f"  Total Events: {stats.get('total_events', 0)}")
            click.echo(f"  Max Depth: {stats.get('max_depth', 0)}")


# Global client instance
ksi_client = KSIClickClient()


def output_format_option():
    """Reusable output format option."""
    return click.option(
        '--output-format', 
        type=click.Choice(['json', 'pretty']),
        default=lambda: os.environ.get("KSI_CLI_OUTPUT_FORMAT", "pretty"),
        help="Output format (can also be set via KSI_CLI_OUTPUT_FORMAT env var)"
    )


def socket_path_option():
    """Reusable socket path option.""" 
    return click.option(
        '--socket-path',
        type=click.Path(path_type=Path),
        help="Path to KSI daemon socket (default: var/run/daemon.sock)"
    )


def health_option():
    """Reusable health option."""
    return click.option(
        '--health',
        is_flag=True,
        help="Show daemon health status and connection details"
    )


@click.group()
@socket_path_option()
@health_option()
@click.pass_context
def cli(ctx, socket_path, health):
    """KSI Command-Line Interface
    
    A dynamic CLI that uses KSI's discovery system for self-configuring commands
    with intelligent parameter handling and type conversion.
    """
    # Store options in context for subcommands
    ctx.ensure_object(dict)
    ctx.obj['socket_path'] = socket_path
    ctx.obj['health'] = health
    
    # Configure logging
    if health:
        configure_structlog(log_level="INFO", log_format="console")
    else:
        configure_structlog(log_level="CRITICAL", log_format="console", force_disable_console=True)


@cli.command(context_settings=dict(
    ignore_unknown_options=True,
    allow_extra_args=True,
))
@output_format_option()
@click.pass_context
async def discover(ctx, output_format):
    """Discover available events in KSI system
    
    This command dynamically discovers its parameters from the system:discover handler.
    Use 'ksi help system:discover' to see all available options.
    
    Common examples:
        ksi discover                              # Show namespace summary
        ksi discover --level namespace            # Show all events by namespace
        ksi discover --namespace agent            # Show agent events
        ksi discover --detail --event monitor:get_status
        ksi discover --orchestration-id orch_xyz  # Discover orchestration structure
    """
    try:
        # Setup client
        global ksi_client
        ksi_client = KSIClickClient(ctx.obj['socket_path'])
        await ksi_client.setup()
        
        # Parse dynamic parameters from extra args
        data = {}
        args = ctx.args
        i = 0
        
        # First, discover what parameters system:discover accepts
        params = await ksi_client.discover_event_parameters("system:discover")
        
        while i < len(args):
            arg = args[i]
            if arg.startswith('--'):
                key = arg[2:].replace('-', '_')
                
                # Check if this is a known parameter
                param_info = params.get(key, {})
                cli_info = param_info.get('cli', {})
                
                if cli_info.get('cli_type') == 'flag' or param_info.get('type') == 'bool':
                    # It's a flag - always boolean
                    data[key] = True
                    i += 1
                elif i + 1 < len(args) and not args[i + 1].startswith('--'):
                    # Next arg is the value
                    value = args[i + 1]
                    
                    # Smart type conversion based on parameter type
                    param_type = param_info.get('type', '').lower()
                    if 'bool' in param_type:
                        data[key] = value.lower() in ('true', '1', 'yes', 'on')
                    elif 'int' in param_type:
                        try:
                            data[key] = int(value)
                        except ValueError:
                            data[key] = value
                    elif 'list' in param_type:
                        if value.startswith('['):
                            try:
                                data[key] = json.loads(value)
                            except:
                                data[key] = value.split(',')
                        else:
                            data[key] = value.split(',')
                    else:
                        # Default to string
                        data[key] = value
                    i += 2
                else:
                    # No value provided - treat as flag
                    data[key] = True
                    i += 1
            else:
                i += 1
        
        # Add default level if not specified
        if 'level' not in data and not data.get('orchestration_id'):
            # Only set default level for non-orchestration discovery
            data['level'] = 'summary'
        
        # Send discovery request
        result = await ksi_client.send_event("system:discover", data)
        
        # Handle output
        if output_format == "json":
            click.echo(json.dumps(result, indent=2))
        else:
            # Pretty print based on response type
            if isinstance(result, dict):
                if "error" in result:
                    click.echo(f"Error: {result['error']}", err=True)
                    ctx.exit(1)
                elif "orchestration" in result:
                    # Orchestration-specific discovery
                    ksi_client.pretty_print_orchestration(result)
                elif result.get('_level') == 'summary' and "namespaces" in result:
                    # Summary response
                    ksi_client.pretty_print_summary(result)
                elif "events" in result:
                    # Events response (namespace or full level)
                    level = data.get('level', 'namespace')
                    ksi_client.pretty_print_discovery(result, level)
                else:
                    click.echo(json.dumps(result, indent=2))
            else:
                click.echo(result)
                
    except KSIError as e:
        click.echo(f"KSI Error: {e}", err=True)
        ctx.exit(1)
    except Exception as e:
        click.echo(f"Error: {e}", err=True)
        ctx.exit(1)
    finally:
        await ksi_client.teardown()


@cli.command()
@click.argument('event_name', required=False)
@click.option('--format-style',
              type=click.Choice(['verbose', 'compact', 'mcp']),
              default='verbose', help='Output format style')
@output_format_option()
@click.pass_context
async def help(ctx, event_name, format_style, output_format):
    """Get help for KSI system or a specific event
    
    Without arguments, shows system overview and common commands.
    With EVENT_NAME, shows detailed help for that event.
    
    Examples:
        ksi help                    # Show system overview
        ksi help system:health      # Get help for specific event
    """
    # Setup client
    global ksi_client
    
    # If no event_name provided, show system overview
    if not event_name:
        ksi_client.show_system_overview()
        return
    
    try:
        ksi_client = KSIClickClient(ctx.obj['socket_path'])
        await ksi_client.setup()
        
        # Build event data
        data = {"event": event_name}
        if format_style != "verbose":
            data["format_style"] = format_style
        
        # Send help request
        result = await ksi_client.send_event("system:help", data)
        
        # Handle output
        if output_format == "json":
            click.echo(json.dumps(result, indent=2))
        else:
            if isinstance(result, dict):
                ksi_client.pretty_print_help(result, event_name)
            else:
                click.echo(result)
                
    except KSIError as e:
        click.echo(f"KSI Error: {e}", err=True)
        ctx.exit(1)
    except Exception as e:
        click.echo(f"Error: {e}", err=True)
        ctx.exit(1)
    finally:
        await ksi_client.teardown()


@cli.command(context_settings=dict(
    ignore_unknown_options=True,
    allow_extra_args=True,
))
@click.argument('event_name')
@click.option('--json', 'json_data', help='Provide event data as JSON')
@output_format_option()
@click.pass_context
async def send(ctx, event_name, json_data, output_format):
    """Send an event to KSI
    
    This command accepts any parameters for the specified event.
    Use --help to see available options, or pass parameters as --key value.
    
    Examples:
        ksi send monitor:get_status --limit 5 --include-agents
        ksi send completion:async --prompt "Hello" --model sonnet
    """
    try:
        # Setup client
        global ksi_client
        ksi_client = KSIClickClient(ctx.obj['socket_path'])
        await ksi_client.setup()
        
        # Get parameter metadata for smart parsing
        param_metadata = await ksi_client.discover_event_parameters(event_name)
        
        # Parse event data
        if json_data:
            data = json.loads(json_data)
        else:
            # Parse extra args into key-value pairs with smart type conversion
            data = {}
            args = ctx.args
            i = 0
            while i < len(args):
                if args[i].startswith('--'):
                    key = args[i][2:].replace('-', '_')  # Convert --include-agents to include_agents
                    
                    # Check if this is a known parameter
                    param_info = param_metadata.get(key, {})
                    cli_info = param_info.get('cli', {})
                    
                    if cli_info.get('cli_type') == 'flag':
                        # It's a flag - always boolean
                        data[key] = True
                        i += 1
                    elif i + 1 < len(args) and not args[i + 1].startswith('--'):
                        # Next arg is the value
                        value = args[i + 1]
                        
                        # Smart type conversion based on parameter type
                        param_type = param_info.get('type', '').lower()
                        if 'bool' in param_type:
                            data[key] = value.lower() in ('true', '1', 'yes', 'on')
                        elif 'int' in param_type:
                            try:
                                data[key] = int(value)
                            except ValueError:
                                data[key] = value
                        elif 'float' in param_type:
                            try:
                                data[key] = float(value)
                            except ValueError:
                                data[key] = value
                        elif 'list' in param_type:
                            # Parse as JSON if it looks like JSON, otherwise split by comma
                            if value.startswith('['):
                                try:
                                    data[key] = json.loads(value)
                                except:
                                    data[key] = value.split(',')
                            else:
                                data[key] = value.split(',')
                        elif 'dict' in param_type or key in ['originator', 'variables', 'context']:
                            # Parse as JSON for dict parameters and known JSON fields
                            if value.startswith('{'):
                                try:
                                    data[key] = json.loads(value)
                                except json.JSONDecodeError:
                                    data[key] = value  # Fall back to string if JSON parsing fails
                            else:
                                data[key] = value
                        else:
                            # Default to string
                            data[key] = value
                        i += 2
                    else:
                        # No value provided - treat as flag
                        data[key] = True
                        i += 1
                else:
                    i += 1
        
        # Send event
        result = await ksi_client.send_event(event_name, data)
        
        # Handle output
        if output_format == "json":
            click.echo(json.dumps(result, indent=2))
        else:
            # Handle different response types
            if isinstance(result, dict):
                if "error" in result:
                    click.echo(format_error_for_cli(result), err=True)
                    ctx.exit(1)
                else:
                    for key, value in result.items():
                        if isinstance(value, (dict, list)):
                            click.echo(f"{key}:")
                            click.echo(f"  {json.dumps(value, indent=2)}")
                        else:
                            click.echo(f"{key}: {value}")
            elif isinstance(result, list):
                if not result:
                    click.echo("No response received")
                else:
                    for i, response in enumerate(result):
                        if len(result) > 1:
                            click.echo(f"Response {i+1}:")
                        if isinstance(response, dict):
                            for key, value in response.items():
                                click.echo(f"{key}: {value}")
                        else:
                            click.echo(response)
            else:
                click.echo(result)
                
    except KSIError as e:
        click.echo(f"KSI Error: {e}", err=True)
        ctx.exit(1)
    except Exception as e:
        click.echo(f"Error: {e}", err=True)
        ctx.exit(1)
    finally:
        await ksi_client.teardown()


def async_command(f):
    """Decorator to make async functions work with Click."""
    def wrapper(*args, **kwargs):
        return asyncio.run(f(*args, **kwargs))
    return wrapper


# Apply async wrapper to commands
discover.callback = async_command(discover.callback)
help.callback = async_command(help.callback) 
send.callback = async_command(send.callback)


if __name__ == "__main__":
    cli()