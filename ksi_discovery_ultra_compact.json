{"v":1,"generated":"2025-07-02","total":138,"namespaces":["agent","api","async_state","completion","composition","config","conversation","correlation","file","injection","message","message_bus","module","monitor","orchestration","permission","sandbox","state","system","transport"],"events":{"system:context":{"m":"core.state","h":"handle_context","s":"Receive infrastructure context - state manager is available."},"state:get":{"m":"core.state","h":"handle_get","s":"Get a value from shared state.","p":[["namespace","str",1,null,"The namespace to get from (default: \"global\")"],["key","str",1,null,"The key to retrieve (required)"]]},"state:set":{"m":"core.state","h":"handle_set","s":"Set a value in shared state.","p":[["namespace","str",1,null,"The namespace to set in (default: \"global\")"],["key","str",1,null,"The key to set (required)"],["value","any",1,null,"The value to store (required)"],["metadata","dict",null,null,"Optional metadata to attach (default: {})"]]},"state:delete":{"m":"core.state","h":"handle_delete","s":"Delete a key from shared state.","p":[["namespace","str",1,null,"The namespace to delete from (default: \"global\")"],["key","str",1,null,"The key to delete (required)"]]},"state:list":{"m":"core.state","h":"handle_list","s":"List keys in shared state.","p":[["namespace","str",null,null,"Filter by namespace (optional)"],["pattern","str",null,null,"Filter by pattern (optional, supports * wildcard)"]]},"async_state:get":{"m":"core.state","h":"handle_async_get","s":"Get value from async state.","p":[["namespace",0,"default"],["key",0,""]]},"async_state:set":{"m":"core.state","h":"handle_async_set","s":"Set value in async state.","p":[["namespace",0,"default"],["key",0,""],["value",1]]},"async_state:delete":{"m":"core.state","h":"handle_async_delete","s":"Delete key from async state.","p":[["namespace",0,"default"],["key",0,""]]},"async_state:push":{"m":"core.state","h":"handle_async_push","s":"Push value to async queue.","p":[["namespace",0,"default"],["queue_name",0,""],["value",1]]},"async_state:pop":{"m":"core.state","h":"handle_async_pop","s":"Pop value from async queue.","p":[["namespace",0,"default"],["queue_name",0,""]]},"async_state:get_keys":{"m":"core.state","h":"handle_async_get_keys","s":"Get all keys in a namespace.","p":[["namespace",0,"default"]]},"async_state:queue_length":{"m":"core.state","h":"handle_async_queue_length","s":"Get length of async queue.","p":[["namespace",0,"default"],["queue_name",0,""]]},"module:list":{"m":"daemon_core","h":"handle_list_modules","s":"List all loaded modules."},"module:events":{"m":"daemon_core","h":"handle_list_events","s":"List all registered events and patterns."},"module:inspect":{"m":"daemon_core","h":"handle_inspect_module","s":"Inspect a specific module using direct function metadata.","p":[["module_name",1]]},"api:schema":{"m":"daemon_core","h":"handle_api_schema","s":"Get complete API schema using direct function inspection."},"system:health":{"m":"daemon_core","h":"handle_system_health","s":"System health check including module status."},"system:startup":{"m":"core.health","h":"handle_startup","s":"Initialize health check plugin."},"system:shutdown":{"m":"core.health","h":"handle_shutdown","s":"Clean up on shutdown."},"correlation:trace":{"m":"core.correlation","h":"handle_get_trace","s":"Get a specific correlation trace.","p":[["correlation_id",1,null,null,"The correlation ID to retrieve trace for"]]},"correlation:chain":{"m":"core.correlation","h":"handle_get_trace_chain","s":"Get the full trace chain for a correlation ID.","p":[["correlation_id",1,null,null,"The correlation ID to retrieve chain for"]]},"correlation:tree":{"m":"core.correlation","h":"handle_get_trace_tree","s":"Get the full trace tree for a correlation ID.","p":[["correlation_id",1,null,null,"The correlation ID to retrieve tree for"]]},"correlation:stats":{"m":"core.correlation","h":"handle_get_stats","s":"Get correlation tracking statistics."},"correlation:cleanup":{"m":"core.correlation","h":"handle_cleanup","s":"Clean up old correlation traces.","p":[["max_age_hours",1,null,null,"Maximum age in hours for traces to keep (default: 24)"]]},"correlation:current":{"m":"core.correlation","h":"handle_get_current","s":"Get current correlation context."},"system:discover":{"m":"core.discovery","h":"handle_discover","s":"Universal discovery endpoint - everything you need to understand KSI.","p":[["detail",1,null,null,"Include parameters and triggers (default: True)"],["namespace",null,null,null,"Filter by namespace (optional)"],["event",null,null,null,"Get details for specific event (optional)"]]},"system:help":{"m":"core.discovery","h":"handle_help","s":"Get detailed help for a specific event.","p":[["event",1,null,null,"The event name to get help for (required)"]]},"monitor:get_events":{"m":"core.monitor","h":"handle_get_events","s":"Query event log with filtering and pagination.","p":[["event_patterns",1,null,null,"List of event name patterns (supports wildcards)"],["client_id",1,null,null,"Filter by specific client"],["since",1,null,null,"Start time (ISO string or timestamp)"],["until",1,null,null,"End time (ISO string or timestamp)"],["limit",1,null,null,"Maximum number of events to return"],["reverse",1,null,null,"Return newest first (default True)"]]},"monitor:get_stats":{"m":"core.monitor","h":"handle_get_stats","s":"Get event log statistics."},"monitor:clear_log":{"m":"core.monitor","h":"handle_clear_log","s":"Clear event log (admin operation)."},"monitor:subscribe":{"m":"core.monitor","h":"handle_subscribe","s":"Subscribe to real-time event stream.","p":[["client_id",1,null,null,"Client identifier"],["event_patterns",1,null,null,"List of event name patterns (supports wildcards)"],["writer",1,null,null,"Transport writer reference"]]},"monitor:unsubscribe":{"m":"core.monitor","h":"handle_unsubscribe","s":"Unsubscribe from event stream.","p":[["client_id",1,null,null,"Client identifier"]]},"monitor:query":{"m":"core.monitor","h":"handle_query","s":"Execute custom SQL query against event database.","p":[["query",1,null,null,"SQL query string"],["params",null,null,null,"Optional query parameters (tuple)"],["limit",1,null,null,"Maximum results (default 1000)"]]},"monitor:get_session_events":{"m":"core.monitor","h":"handle_get_session_events","s":"Get all events for a specific session.","p":[["session_id",1,null,null,"Session ID to query"],["include_memory",1,null,null,"Include events from memory buffer (default True)"],["reverse",1,null,null,"Sort newest first (default True)"]]},"monitor:get_correlation_chain":{"m":"core.monitor","h":"handle_get_correlation_chain","s":"Get all events in a correlation chain.","p":[["correlation_id",1,null,null,"Correlation ID to trace"],["include_memory",1,null,null,"Include events from memory buffer (default True)"]]},"system:ready":{"m":"transport.unix_socket","h":"handle_ready","s":"Return long-running server task to keep daemon alive."},"transport:create":{"m":"transport.unix_socket","h":"handle_create_transport","s":"Create Unix socket transport if requested.","p":[["transport_type",1],["config"]]},"completion:cancelled":{"m":"transport.unix_socket","h":"handle_broadcastable_event","s":"Broadcast certain events to all connected clients.","p":[["timestamp",0,""],["correlation_id",1]]},"completion:error":{"m":"transport.unix_socket","h":"handle_broadcastable_event","s":"Broadcast certain events to all connected clients.","p":[["timestamp",0,""],["correlation_id",1]]},"completion:progress":{"m":"transport.unix_socket","h":"handle_broadcastable_event","s":"Broadcast certain events to all connected clients.","p":[["timestamp",0,""],["correlation_id",1]]},"completion:result":{"m":"transport.unix_socket","h":"handle_broadcastable_event","s":"Broadcast certain events to all connected clients.","p":[["timestamp",0,""],["correlation_id",1]]},"completion:async":{"m":"completion.completion_service","h":"handle_async_completion","s":"Handle async completion requests with smart queueing.","p":[["session_id",0,"default"],["model",0,"unknown"],["request_id",1]]},"completion:cancel":{"m":"completion.completion_service","h":"handle_cancel_completion","s":"Cancel an in-progress completion.","p":[["request_id",1]]},"completion:status":{"m":"completion.completion_service","h":"handle_completion_status","s":"Get status of all active completions."},"completion:session_status":{"m":"completion.completion_service","h":"handle_session_status","s":"Get detailed status for a specific session.","p":[["session_id",1]]},"permission:get_profile":{"m":"permissions.permission_service","h":"handle_get_profile","s":"Get details of a specific permission profile.","p":[["level","str",1,null,"The permission level/profile name (one of: restricted, standard, trusted, researcher)"]]},"permission:set_agent":{"m":"permissions.permission_service","h":"handle_set_agent_permissions","s":"Set permissions for an agent.","p":[["agent_id","str",1,null,"The agent ID to set permissions for"],["permissions","dict",null,null,"Full permission object (optional)"],["profile","str",0,"restricted","Base profile to use (optional, defaults: restricted)"],["overrides","dict",null,null,"Permission overrides to apply (optional)"]]},"permission:validate_spawn":{"m":"permissions.permission_service","h":"handle_validate_spawn","s":"Validate if parent can spawn child with given permissions.","p":[["parent_id","str",1,null,"The parent agent ID"],["child_permissions","dict",1,null,"The requested permissions for the child agent"]]},"permission:get_agent":{"m":"permissions.permission_service","h":"handle_get_agent_permissions","s":"Get permissions for a specific agent.","p":[["agent_id","str",1,null,"The agent ID to query permissions for"]]},"permission:remove_agent":{"m":"permissions.permission_service","h":"handle_remove_agent_permissions","s":"Remove permissions for an agent.","p":[["agent_id","str",1,null,"The agent ID to remove permissions for"]]},"permission:list_profiles":{"m":"permissions.permission_service","h":"handle_list_profiles","s":"List available permission profiles."},"sandbox:create":{"m":"permissions.permission_service","h":"handle_create_sandbox","s":"Create a new sandbox for an agent.","p":[["agent_id","str",1,null,"The agent ID"],["config","dict",null,null,"Sandbox configuration (optional)"]]},"sandbox:get":{"m":"permissions.permission_service","h":"handle_get_sandbox","s":"Get sandbox information for an agent.","p":[["agent_id","str",1,null,"The agent ID"]]},"sandbox:remove":{"m":"permissions.permission_service","h":"handle_remove_sandbox","s":"Remove an agent's sandbox.","p":[["agent_id","str",1,null,"The agent ID"],["force","bool",0,false,"Force removal even with nested children (optional, default: false)"]]},"sandbox:list":{"m":"permissions.permission_service","h":"handle_list_sandboxes","s":"List all active sandboxes."},"sandbox:stats":{"m":"permissions.permission_service","h":"handle_sandbox_stats","s":"Get sandbox statistics."},"agent:spawn":{"m":"agent.agent_service","h":"handle_spawn_agent","s":"Spawn a new agent thread with optional profile.","p":[["agent_id",1],["profile",1],["profile_name",1],["composition",1],["session_id",1],["spawn_mode",0,"fixed"],["selection_context"],["task",1],["enable_tools",0,false],["permission_profile",0,"standard"],["sandbox_config"],["permission_overrides"],["config",1],["context",1],["_composition_selection",1]]},"agent:terminate":{"m":"agent.agent_service","h":"handle_terminate_agent","s":"Terminate an agent thread.","p":[["agent_id",1],["force",0,false]]},"agent:restart":{"m":"agent.agent_service","h":"handle_restart_agent","s":"Restart an agent.","p":[["agent_id",1]]},"agent:register":{"m":"agent.agent_service","h":"handle_register_agent","s":"Register an external agent.","p":[["agent_id",1],["info"]]},"agent:unregister":{"m":"agent.agent_service","h":"handle_unregister_agent","s":"Unregister an agent.","p":[["agent_id",1]]},"agent:list":{"m":"agent.agent_service","h":"handle_list_agents","s":"List registered agents.","p":[["status",1]]},"agent:create_identity":{"m":"agent.agent_service","h":"handle_create_identity","s":"Create a new agent identity.","p":[["agent_id",1],["identity"]]},"agent:update_identity":{"m":"agent.agent_service","h":"handle_update_identity","s":"Update an agent identity.","p":[["agent_id",1],["updates"]]},"agent:remove_identity":{"m":"agent.agent_service","h":"handle_remove_identity","s":"Remove an agent identity.","p":[["agent_id",1]]},"agent:list_identities":{"m":"agent.agent_service","h":"handle_list_identities","s":"List agent identities."},"agent:get_identity":{"m":"agent.agent_service","h":"handle_get_identity","s":"Get a specific agent identity.","p":[["agent_id",1]]},"agent:route_task":{"m":"agent.agent_service","h":"handle_route_task","s":"Route a task to an appropriate agent.","p":[["task"]]},"agent:get_capabilities":{"m":"agent.agent_service","h":"handle_get_capabilities","s":"Get capabilities of an agent or all agents.","p":[["agent_id",1]]},"agent:send_message":{"m":"agent.agent_service","h":"handle_send_message","s":"Send a message to an agent.","p":[["agent_id",1],["message"]]},"agent:broadcast":{"m":"agent.agent_service","h":"handle_broadcast","s":"Broadcast a message to all agents.","p":[["message"],["sender",0,"system"]]},"agent:update_composition":{"m":"agent.agent_service","h":"handle_update_composition","s":"Handle agent composition update request.","p":[["agent_id",1],["new_composition",1],["reason",0,"Adaptation required"]]},"agent:discover_peers":{"m":"agent.agent_service","h":"handle_discover_peers","s":"Discover other agents and their capabilities.","p":[["agent_id",1],["capabilities"],["roles"]]},"agent:negotiate_roles":{"m":"agent.agent_service","h":"handle_negotiate_roles","s":"Coordinate role negotiation between agents.","p":[["participants"],["type",0,"collaborative"],["context"]]},"message:subscribe":{"m":"messaging.message_bus","h":"handle_subscribe","s":"Handle subscription request.","p":[["agent_id",1],["event_types"]]},"message:unsubscribe":{"m":"messaging.message_bus","h":"handle_unsubscribe","s":"Handle unsubscription request.","p":[["agent_id",1],["event_types"]]},"message:publish":{"m":"messaging.message_bus","h":"handle_publish","s":"Handle message publication.","p":[["agent_id",1],["event_type",1],["message"]]},"message:subscriptions":{"m":"messaging.message_bus","h":"handle_get_subscriptions","s":"Get subscription information.","p":[["agent_id",1]]},"message_bus:stats":{"m":"messaging.message_bus","h":"handle_get_stats","s":"Get message bus statistics."},"message:connect":{"m":"messaging.message_bus","h":"handle_connect_agent","s":"Handle agent connection.","p":[["agent_id",1]]},"message:disconnect":{"m":"messaging.message_bus","h":"handle_disconnect_agent","s":"Handle agent disconnection.","p":[["agent_id",1]]},"transport:message":{"m":"messaging.message_bus","h":"handle_transport_message","s":"Handle legacy transport:message events by converting them.","p":[["command",1],["parameters"]]},"orchestration:start":{"m":"orchestration.orchestration_service","h":"handle_orchestration_start","s":"Start a new orchestration.","p":[["pattern",1],["vars"]]},"orchestration:message":{"m":"orchestration.orchestration_service","h":"handle_orchestration_message","s":"Route a message within an orchestration."},"orchestration:status":{"m":"orchestration.orchestration_service","h":"handle_orchestration_status","s":"Get orchestration status.","p":[["orchestration_id",1]]},"orchestration:terminate":{"m":"orchestration.orchestration_service","h":"handle_orchestration_terminate","s":"Manually terminate an orchestration.","p":[["orchestration_id",1]]},"orchestration:list_patterns":{"m":"orchestration.orchestration_service","h":"handle_list_patterns","s":"List available orchestration patterns."},"orchestration:load_pattern":{"m":"orchestration.orchestration_service","h":"handle_load_pattern","s":"Load and validate an orchestration pattern.","p":[["pattern",1]]},"orchestration:get_instance":{"m":"orchestration.orchestration_service","h":"handle_get_instance","s":"Get detailed information about an orchestration instance.","p":[["orchestration_id",1]]},"composition:compose":{"m":"composition.composition_service","h":"handle_compose","s":"Handle generic composition request.","p":[["name",1],["type",1],["variables"]]},"composition:profile":{"m":"composition.composition_service","h":"handle_compose_profile","s":"Handle profile composition request.","p":[["name",1],["variables"]]},"composition:prompt":{"m":"composition.composition_service","h":"handle_compose_prompt","s":"Handle prompt composition request.","p":[["name",1],["variables"]]},"composition:validate":{"m":"composition.composition_service","h":"handle_validate","s":"Validate a composition.","p":[["name",1],["type",1]]},"composition:discover":{"m":"composition.composition_service","h":"handle_discover","s":"Discover available compositions using index with optional metadata filtering.","p":[["metadata_filter",1]]},"composition:list":{"m":"composition.composition_service","h":"handle_list","s":"List all compositions of a given type.","p":[["type",0,"all"]]},"composition:get":{"m":"composition.composition_service","h":"handle_get","s":"Get a composition definition.","p":[["name",1],["type",1]]},"composition:reload":{"m":"composition.composition_service","h":"handle_reload","s":"Reload compositions by rebuilding index."},"composition:load_tree":{"m":"composition.composition_service","h":"handle_load_tree","s":"Universal tree loading based on composition's declared strategy.","p":[["name",1],["max_depth",0,5]]},"composition:load_bulk":{"m":"composition.composition_service","h":"handle_load_bulk","s":"Universal bulk loading for agent efficiency.","p":[["names"]]},"composition:select":{"m":"composition.composition_service","h":"handle_select_composition","s":"Handle intelligent composition selection using sophisticated scoring algorithm.","p":[["agent_id",0,"unknown"],["role",1],["capabilities"],["task_description",1],["preferred_style",1],["context_variables"],["requirements"],["max_suggestions",0,1]]},"composition:suggest":{"m":"composition.composition_service","h":"handle_suggest_compositions","s":"Get top N composition suggestions for the given context.","p":[["agent_id",0,"unknown"],["role",1],["capabilities"],["task_description",1],["preferred_style",1],["context_variables"],["requirements"],["max_suggestions",0,3]]},"composition:validate_context":{"m":"composition.composition_service","h":"handle_validate_context","s":"Validate that a composition will work with the given context.","p":[["composition_name",1],["context"]]},"composition:capabilities":{"m":"composition.composition_service","h":"handle_get_capabilities","s":"Get available KSI capabilities from declarative schema.","p":[["group",1]]},"composition:get_path":{"m":"composition.composition_service","h":"handle_get_path","s":"Get the file path for a composition.","p":[["full_name",1]]},"composition:get_metadata":{"m":"composition.composition_service","h":"handle_get_metadata","s":"Get metadata for a composition.","p":[["full_name",1]]},"composition:rebuild_index":{"m":"composition.composition_service","h":"handle_rebuild_index","s":"Rebuild the composition index.","p":[["repository_id",0,"local"]]},"composition:index_file":{"m":"composition.composition_service","h":"handle_index_file","s":"Index a single composition file.","p":[["file_path",1]]},"composition:create":{"m":"composition.composition_service","h":"handle_create_composition","s":"Handle runtime composition creation.","p":[["name",1],["type",0,"profile"],["extends",0,"base_agent"],["description"],["author",0,"dynamic_agent"],["metadata"],["config"],["role",0,"assistant"],["model",0,"sonnet"],["capabilities"],["tools"],["agent_id",1],["prompt",1],["components",1]]},"conversation:list":{"m":"conversation.conversation_service","h":"handle_list_conversations","s":"List available conversations with metadata.","p":[["limit",0,100],["offset",0,0],["sort_by",0,"last_timestamp"],["reverse",0,true],["start_date",1],["end_date",1]]},"conversation:search":{"m":"conversation.conversation_service","h":"handle_search_conversations","s":"Search conversations by content.","p":[["query",0,""],["limit",0,50],["search_in"]]},"conversation:get":{"m":"conversation.conversation_service","h":"handle_get_conversation","s":"Get a specific conversation with full message history.","p":[["session_id",1],["limit",0,1000],["offset",0,0],["conversation_id",1]]},"conversation:export":{"m":"conversation.conversation_service","h":"handle_export_conversation","s":"Export conversation to markdown or JSON format.","p":[["session_id",1],["format",0,"markdown"]]},"conversation:stats":{"m":"conversation.conversation_service","h":"handle_conversation_stats","s":"Get statistics about conversations."},"conversation:active":{"m":"conversation.conversation_service","h":"handle_active_conversations","s":"Find active conversations from recent COMPLETION_RESULT messages.","p":[["max_lines",0,100],["max_age_hours",0,2160]]},"conversation:acquire_lock":{"m":"conversation.conversation_lock","h":"handle_acquire_lock","s":"Acquire lock for a conversation.","p":[["request_id",1],["conversation_id",1],["metadata"]]},"conversation:release_lock":{"m":"conversation.conversation_lock","h":"handle_release_lock","s":"Release a conversation lock.","p":[["request_id",1]]},"conversation:fork_detected":{"m":"conversation.conversation_lock","h":"handle_fork_detected","s":"Handle fork detection.","p":[["request_id",1],["expected_conversation_id",1],["actual_conversation_id",1]]},"conversation:lock_status":{"m":"conversation.conversation_lock","h":"handle_lock_status","s":"Get lock status for a conversation.","p":[["conversation_id",1]]},"injection:status":{"m":"injection.injection_router","h":"handle_injection_status","s":"Get injection router status."},"injection:inject":{"m":"injection.injection_router","h":"handle_injection_inject","s":"Handle unified injection request.","p":[["mode",0,"next"],["position",0,"before_prompt"],["content",0,""],["session_id",1],["priority",0,"normal"],["metadata"]]},"injection:queue":{"m":"injection.injection_router","h":"handle_injection_queue","s":"Handle queue injection metadata request from completion service."},"injection:batch":{"m":"injection.injection_router","h":"handle_injection_batch","s":"Handle batch injection request.","p":[["injections"]]},"injection:list":{"m":"injection.injection_router","h":"handle_injection_list","s":"Handle list injections request.","p":[["session_id",1]]},"injection:clear":{"m":"injection.injection_router","h":"handle_injection_clear","s":"Handle clear injections request.","p":[["session_id",1],["mode",1]]},"injection:process_result":{"m":"injection.injection_router","h":"handle_injection_process_result","s":"Process a completion result for injection - explicitly called by completion service.","p":[["request_id",1],["result"],["injection_metadata"]]},"injection:execute":{"m":"injection.injection_router","h":"execute_injection","s":"Execute a queued injection by creating a new completion request.","p":[["session_id",1],["content",1],["request_id",1],["target_sessions"],["model",0,"claude-cli/sonnet"],["priority",0,"normal"],["injection_type",0,"system_reminder"]]},"file:read":{"m":"file.file_service","h":"handle_read","s":"Read a file with safety validation.","p":[["path","str",1,null,"The file path to read (required)"],["encoding","str",1,null,"File encoding (default: utf-8)"],["binary","bool",1,null,"Read as binary data (default: false)"]]},"file:write":{"m":"file.file_service","h":"handle_write","s":"Write to a file with automatic backup.","p":[["path","str",1,null,"The file path to write (required)"],["content","str",1,null,"The content to write (required)"],["encoding","str",1,null,"File encoding (default: utf-8)"],["create_backup","bool",1,null,"Create backup before writing (default: true)"],["binary","bool",1,null,"Write binary data (content should be hex string) (default: false)"]]},"file:backup":{"m":"file.file_service","h":"handle_backup","s":"Create a manual backup of a file.","p":[["path","str",1,null,"The file path to backup (required)"],["backup_name","str",null,null,"Custom backup name (optional, auto-generated if not provided)"]]},"file:rollback":{"m":"file.file_service","h":"handle_rollback","s":"Rollback a file to a previous backup.","p":[["path","str",1,null,"The file path to rollback (required)"],["backup_name","str",null,null,"Specific backup to restore (optional, uses latest if not provided)"]]},"file:list":{"m":"file.file_service","h":"handle_list","s":"List files in a directory with filtering.","p":[["path","str",1,null,"The directory path to list (required)"],["pattern","str",0,"*","Filename pattern to match (optional)"],["recursive","bool",1,null,"Include subdirectories (default: false)"],["include_hidden","bool",1,null,"Include hidden files (default: false)"]]},"file:validate":{"m":"file.file_service","h":"handle_validate","s":"Validate file access and properties.","p":[["path","str",1,null,"The file path to validate (required)"],["check_writable","bool",1,null,"Check if file is writable (default: false)"],["check_content","str",null,null,"Validate file contains specific content (optional)"]]},"config:get":{"m":"config.config_service","h":"handle_get","s":"Get configuration value or entire config file.","p":[["key","str",1,null,"Configuration key path (e.g., 'daemon.log_level') (required)"],["config_type","str",1,null,"Type of config ('daemon', 'composition', 'schema', 'capabilities')"],["file_path","str",null,null,"Specific config file path (optional)"]]},"config:set":{"m":"config.config_service","h":"handle_set","s":"Set configuration value with automatic backup.","p":[["key","str",1,null,"Configuration key path (e.g., 'daemon.log_level') (required)"],["value","any",1,null,"Value to set (required)"],["config_type","str",1,null,"Type of config ('daemon', 'composition', 'schema', 'capabilities')"],["file_path","str",null,null,"Specific config file path (optional)"],["create_backup","bool",1,null,"Create backup before modification (default: true)"]],"t":["config:changed"]},"config:validate":{"m":"config.config_service","h":"handle_validate","s":"Validate configuration file syntax and schema.","p":[["config_type","str",1,null,"Type of config to validate ('daemon', 'composition', 'schema', 'capabilities')"],["file_path","str",null,null,"Specific config file path (optional)"],["schema_path","str",null,null,"Path to validation schema (optional)"]]},"config:reload":{"m":"config.config_service","h":"handle_reload","s":"Reload configuration components.","p":[["component","str",1,null,"Component to reload ('daemon', 'plugins', 'compositions', 'all')"]],"t":["daemon:config_reload","plugins:reload","composition:reload"]},"config:backup":{"m":"config.config_service","h":"handle_backup","s":"Create manual backup of configuration.","p":[["config_type","str",1,null,"Type of config to backup (required)"],["file_path","str",null,null,"Specific config file path (optional)"],["backup_name","str",null,null,"Custom backup name (optional)"]]},"config:rollback":{"m":"config.config_service","h":"handle_rollback","s":"Rollback configuration to previous backup.","p":[["config_type","str",1,null,"Type of config to rollback (required)"],["file_path","str",null,null,"Specific config file path (optional)"],["backup_name","str",null,null,"Specific backup to restore (optional, uses latest if not provided)"]],"t":["config:rolled_back"]}},"_legend":{"m":"module (without ksi_daemon prefix)","h":"handler function","s":"summary","y":"sync flag (omitted=async)","p":"parameters [[name, type?, required?, default?, desc?], ...]","t":"triggers array"}}